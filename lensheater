#!/usr/bin/env python3
#
# This file is part of lensheaterd.
#
# lensheaterd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# lensheaterd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with lensheaterd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for querying the latest measurement from lensheaterd"""

import glob
import json
import os
import sys
import Pyro4
from warwick.observatory.common import TFmt
from warwick.observatory.lensheater import Config

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook


def run_command(command, args):
    """Runs a daemon command, handling error messages"""
    if 'LENSHEATERD_CONFIG_PATH' in os.environ:
        config = Config(os.environ['LENSHEATERD_CONFIG_PATH'])
    else:
        # Load the config file defined in the LENSHEATERD_CONFIG_PATH environment variable or from the
        # default system location (/etc/lensheaterd/). Exit with an error if zero or multiple are found.
        files = glob.glob("/etc/lensheaterd/*.json")
        if len(files) != 1:
            print('error: failed to guess the default config file. ' +
                  'Run as LENSHEATERD_CONFIG_PATH=/path/to/config.json lensheater <command>')
            return 1

        config = Config(files[0])

    try:
        ret = command(config, args)
    except Pyro4.errors.CommunicationError:
        ret = -101

    sys.exit(ret)


def print_status(config, _):
    """Reports the current pipeline status"""
    with config.daemon.connect() as lensheater:
        data = lensheater.report_status()

    print('Data received \033[1m{}\033[0m:'.format(data['date']))
    for i in range(config.channels):
        channel = str(i + 1)
        temp = data.get('temp_' + channel, None)
        temp_label = TFmt.Red + 'UNKNOWN' if temp is None else '{:.1f}\u00B0C'.format(temp)

        setpoint = data.get('set_' + channel, None)
        setpoint_label = TFmt.Red + 'UNKNOWN' if setpoint is None else '{:.1f}\u00B0C'.format(setpoint)

        print('   Lens ' + channel + ': ' + TFmt.Bold + temp_label + TFmt.Clear + ' / ' + TFmt.Bold + setpoint_label +
              TFmt.Clear)

    return 0


def print_json(config, _):
    """Prints the latest environment data in machine-readable form"""
    with config.daemon.connect() as lensheater:
        latest = lensheater.report_status()

    print(json.dumps(latest or {}))
    return 0

def print_usage():
    """Prints the utility help"""
    print('usage: {} <command> [<args>]'.format(SCRIPT_NAME))
    print()
    print('   status      print a human-readable summary of the lens temperatures')
    print('   json        print a machine-readable summary of the lens temperatures')
    print()
    return 0


if __name__ == '__main__':
    commands = {
        'status': print_status,
        'json': print_json
    }

    if len(sys.argv) >= 2 and sys.argv[1] in commands:
        sys.exit(run_command(commands[sys.argv[1]], sys.argv[2:]))

    sys.exit(print_usage())
